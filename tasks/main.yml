---
# tasks file for nginx

# Instala o repositório EPEL para distribuições Amazon Linux, Oracle Linux e RedHat
- name: YUM | Installing epel - repository on Amazon Linux
  ansible.builtin.shell: sudo amazon-linux-extras install epel -y
  when: ansible_distribution == "Amazon"
  tags: epel_repo

- name: YUM | Installing epel - repository on Oracle Linux / RedHat
  ansible.builtin.yum:
    name: epel-release
    state: present
  when: ansible_distribution == "OracleLinux" or ansible_distribution == "RedHat"
  tags: epel_repo

# Configura o repositório Nginx em Oracle Linux e RedHat
- name: SYSTEM | Configuring Nginx repository on OracleLinux / RedHat
  ansible.builtin.copy:
    src: nginx.repo
    dest: /etc/yum.repos.d/nginx.repo
    owner: root
    group: root
    mode: 0644
  when: ansible_distribution == "OracleLinux" or ansible_distribution == "RedHat"
  tags: repo_nginx

# Configura o repositório Nginx em Amazon Linux
- name: SYSTEM | Configuring Nginx repository on Amazon Linux
  ansible.builtin.copy:
    src: nginx_amzn2.repo
    dest: /etc/yum.repos.d/nginx.repo
    owner: root
    group: root
    mode: 0644
  when: ansible_distribution == "Amazon"
  tags: repo_nginx

# Atualiza o sistema conforme o gerenciador de pacotes utilizado (apt para Debian/Ubuntu e yum para RHEL/Oracle)
- name: SYSTEM | Updating system (Debian/Ubuntu)
  ansible.builtin.apt:
    update_cache: yes
    upgrade: dist
  when: ansible_facts['pkg_mgr'] == 'apt'
  tags: update_system

- name: SYSTEM | Updating system (RHEL/Oracle)
  ansible.builtin.yum:
    name: '*'
    state: latest
    update_cache: yes
  when: ansible_facts['pkg_mgr'] == 'yum' or ansible_facts['pkg_mgr'] == 'dnf'
  tags: update_system

# Remove pacotes Nginx em conflito antes de instalar o Nginx mais recente
- name: Remove existing nginx-core package if present
  ansible.builtin.yum:
    name: nginx-core
    state: absent
  when: ansible_distribution == "OracleLinux" or ansible_distribution == "RedHat"
  ignore_errors: yes
  tags: remove_conflict

# Instala a versão mais recente do Nginx, considerando o gerenciador de pacotes correto
- name: NGINX | Installing nginx (latest version - Debian/Ubuntu)
  ansible.builtin.apt:
    name: nginx
    state: latest
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  tags: install_nginx

- name: NGINX | Installing nginx (latest version - RHEL/Oracle)
  ansible.builtin.yum:
    name: nginx
    state: latest
  when: ansible_distribution == "OracleLinux" or ansible_distribution == "RedHat"
  tags: install_nginx

- name: NGINX | Installing nginx (latest version - Amazon Linux)
  ansible.builtin.yum:
    name: nginx
    state: latest
  when: ansible_distribution == "Amazon"
  tags: install_nginx

# Cria os diretórios necessários para a configuração do Nginx
- name: NGINX | Creating directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: 0700
    owner: root
    group: root
  with_items:
    - /etc/nginx/features
    - /etc/nginx/cert
    - /etc/nginx/vhosts.d
  tags: create_nginx_dirs

# Copia os arquivos de configuração para os diretórios corretos do Nginx
- name: NGINX | Copying configuration files
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0644
    force: yes
    backup: yes
  with_items:
    - { src: 'nginx.conf', dest: '/etc/nginx/nginx.conf' }
    - { src: 'gzip.conf', dest: '/etc/nginx/features/gzip.conf' }
    - { src: 'ssl.conf', dest: '/etc/nginx/features/ssl.conf' }
    - { src: 'vhost.example', dest: '/etc/nginx/vhosts.d/vhost.example' }
    - { src: 'dhparam.pem', dest: '/etc/nginx/cert/dhparam.pem' }
  tags: copy_nginx_files

# Cria o diretório raiz do Nginx (certifique-se que a variável `root_dir` esteja definida no inventário ou playbook)
- name: NGINX | Creating nginx root directory
  ansible.builtin.file:
    path: "{{ root_dir }}"
    state: directory
    mode: 0775
    owner: nginx
    group: nginx
    recurse: yes
  when: root_dir is defined
  tags: create_root_dir

# Extrai o website estático para o diretório raiz
- name: NGINX | Extracting static website (template)
  ansible.builtin.unarchive:
    src: website.tar.gz
    dest: "{{ root_dir }}"
    owner: nginx
    group: nginx
    remote_src: no
  when: root_dir is defined
  notify: Restarting nginx
  tags: extract_website

# Handler para reiniciar o Nginx após alterações de configuração
- name: Restarting nginx
  ansible.builtin.systemd:
    name: nginx
    state: restarted
  tags: restart_nginx

